;; IO stuff

(def put (l)
  (if (nil? l)
      ()
      (eval (write-char (car l) stdout)
            (put (cdr l)))))

(def putln (l)
  (put l)
  (write-char '\n' stdout))

(def print (o)
  (put (show o)))

(def println (o)
  (eval (print o)
        (put "\n")))

(def read-file (fp)
  (set h (open-file fp 'read))
  (def read-all (h)
    (if (at-eof? h)
        ()
        (cons (read-char h) (read-all h))))
  (set res (read-all h))
  (close-file h)
  res)

(def write-file (fp str)
  (set h (open-file fp 'write))
  (def write-all (str h)
    (if (nil? str)
        ()
        (eval (write-char (car str) h)
              (write-all (cdr str) h))))
  (write-all str h)
  (close-file h))

;; list stuff

(def map (f l)
  (if (nil? l)
      ()
      (cons (f (car l)) (map f (cdr l)))))

(def filter (p l)
  (if (nil? l)
      ()
      (if (p (car l))
        (cons (car l) (filter p (cdr l)))
        (filter p (cdr l)))))

(def fold (f i l)
  (if (nil? l)
    i
    (fold f (f i (car l)) (cdr l))))

(def foreach (l f)
  (map f l)
  ())

(def length (l)
  (if (nil? l)
      0
      (+ 1 (length (cdr l)))))

(def drop (n l)
  (if (== n 0)
      l
      (if (nil? l)
        ()
        (drop (- n 1) (cdr l)))))

(def concat (l1 l2)
  (if (nil? l1)
      l2
      (cons (car l1) (concat (cdr l1) l2))))

(def sum (l)
  (fold + 0 l))

(def range (f t)
  (if (== f t)
      (cons f ())
      (cons f (range (+ f 1) t))))

(def repeat (n x)
  (if (== n 0)
      ()
      (cons x (repeat (- n 1) x))))

(def zip-with-index (list)
  (def zwi (l i)
    (if (nil? l)
        ()
        (cons (cons i (car l)) (zwi (cdr l) (+ i 1)))))
  (zwi list 0))

(def sort (list)
  (mergesort list <))

(def mergesort (list fun)
  (if (nil? list)
      ()
      (if (only-one-item? list)
        list
        (eval (set s (bisect list))
              (merge (mergesort (car s) fun) (mergesort (cdr s) fun) fun)))))

(def only-one-item? (list)
  (== (cdr list) ()))

(def bisect (list)
  (split-at (/ (length list) 2) list))

(def split-at (n list)
  (if (== n 0)
      (cons () list)
      (eval (set s (split-at (- n 1) (cdr list)))
            (cons (cons (car list) (car s)) (cdr s)))))

(def merge (l1 l2 fun)
  (if (nil? l1)
      l2
      (if (nil? l2)
          l1
          (if (fun (car l1) (car l2))
              (cons (car l1) (merge (cdr l1) l2 fun))
              (cons (car l2) (merge l1 (cdr l2) fun))))))
